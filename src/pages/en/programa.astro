---
import programs from "../../data/constans_program.ts";
import Button from "../../components/schedule/Button.astro";
import ConferenceITM from "../../components/schedule/ConferenceITM.tsx";
import i18next, { t, changeLanguage } from "i18next";
import Layout from "../../layouts/Layout.astro";

changeLanguage("en");

const translate = t("program", { returnObjects: true }) as Record<string, string>;
---

<Layout title={`ITM | ${t('program.title')}`}>
  <main class='mx-5 md:mx-16 lg:mx-32 pb-5'>
    <h1 class='text-left text-[#E42128] text-5xl font-extrabold py-5'>
      {t('program.title')}
    </h1>
    <p class='italic mb-5 text-lg'>* {t('program.changes')}</p>
    <section>
      <h3 class='text-3xl pb-3'>{t('program.stages')}</h3>
      <div class='md:ml-5'>
        <Button id='stage-1'>Transformation Area</Button>
        <Button id='stage-2'>Leaders of Tomorrow Arena</Button>
      </div>
      <div
        class='w-full bg-gradient-to-br from-[#E42128] to-[#CF1363] h-[1px] mt-1 mb-3 rounded-sm'
      >
      </div>
      <div class='md:ml-5 day-buttons'>
        <Button id='day-1'>
          {t('program.day')} 1<br />{t('program.day_1')}, 11 {
            t('program.month')
          }
        </Button>
        <Button id='day-2'>
          {t('program.day')} 2<br />{t('program.day_2')}, 12 {
            t('program.month')
          }
        </Button>
        <Button id='day-3'>
          {t('program.day')} 3<br />{t('program.day_3')}, 13 {
            t('program.month')
          }
        </Button>
      </div>
      {
        programs.map((program) => (
          <section
            class='mt-5 hidden'
            id={`program-${program.stage}-${program.day}`}
          >
            {program.conferences.map((item, key) => (
              <ConferenceITM
                item={item}
                translate={translate}
                language={i18next.language}
                client:load
              />
            ))}
          </section>
        ))
      }
    </section>
  </main>
</Layout>

<style>
  body {
    background-color: #111827;
    color: white;
  }

  .day-buttons > * {
    width: 100%;
  }

  @media (min-width: 768px) {
    .day-buttons > * {
      width: fit-content;
    }
  }
</style>

<style is:global>
  .modal-overlay {
    z-index: 999999 !important;
    position: fixed !important;
    backdrop-filter: blur(8px) !important;
  }

  .modal-content {
    z-index: 1000000 !important;
    position: relative !important;
  }

  @keyframes modalFadeIn {
    from {
      opacity: 0;
      transform: scale(0.95) translateY(20px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }
</style>

<script>
  const state = {
    stage: 1,
    day: 1,
  }
  const url = new URL(window.location.href)

  function showProgram(stage: number, day: number) {
    if (state.stage === stage && state.day === day) return

    // Ocultar programa actual
    const currentProgram = document.getElementById(
      `program-${state.stage}-${state.day}`
    )
    if (currentProgram) {
      currentProgram.style.display = 'none'
    }

    // Mostrar nuevo programa
    const newProgram = document.getElementById(`program-${stage}-${day}`)
    if (newProgram) {
      newProgram.style.display = 'block'
    }

    // Actualizar URL
    url.searchParams.set('stage', stage.toString())
    url.searchParams.set('day', day.toString())
    window.history.pushState({}, '', url)

    // Actualizar state
    state.stage = stage
    state.day = day
  }

  function changeOpacityStageBts(stage: number) {
    // Remover clase activa de todos los botones de stage
    const stageButtons = ['stage-1', 'stage-2']
    stageButtons.forEach((id) => {
      const button = document.getElementById(id)
      const firstChild = button?.firstElementChild
      if (firstChild && firstChild.classList.contains('bg-opacity-0')) {
        firstChild.classList.remove('bg-opacity-0')
      }
    })

    // Agregar clase activa al botón seleccionado
    const activeButton = document.getElementById(`stage-${stage}`)
    const activeChild = activeButton?.firstElementChild
    if (activeChild) {
      activeChild.classList.add('bg-opacity-0')
    }
  }

  function changeOpacityDayBts(day: number) {
    // Remover clase activa de todos los botones de día
    const dayButtons = ['day-1', 'day-2', 'day-3']
    dayButtons.forEach((id) => {
      const button = document.getElementById(id)
      const firstChild = button?.firstElementChild
      if (firstChild && firstChild.classList.contains('bg-opacity-0')) {
        firstChild.classList.remove('bg-opacity-0')
      }
    })

    // Agregar clase activa al botón seleccionado
    const activeButton = document.getElementById(`day-${day}`)
    const activeChild = activeButton?.firstElementChild
    if (activeChild) {
      activeChild.classList.add('bg-opacity-0')
    }
  }

  function initProgram() {
    const stage = Number(url.searchParams.get('stage')) || 1
    const day = Number(url.searchParams.get('day')) || 1

    state.stage = stage
    state.day = day

    // Mostrar programa inicial
    const programElement = document.getElementById(`program-${stage}-${day}`)
    if (programElement) {
      programElement.style.display = 'block'
    }

    // Configurar botones activos
    changeOpacityStageBts(stage)
    changeOpacityDayBts(day)
  }

  function addEventListeners() {
    // Event listeners para botones de stage
    const stage1Btn = document.getElementById('stage-1')
    const stage2Btn = document.getElementById('stage-2')

    stage1Btn?.addEventListener('click', () => {
      changeOpacityStageBts(1)
      showProgram(1, state.day)
    })

    stage2Btn?.addEventListener('click', () => {
      changeOpacityStageBts(2)
      showProgram(2, state.day)
    })

    // Event listeners para botones de día
    const day1Btn = document.getElementById('day-1')
    const day2Btn = document.getElementById('day-2')
    const day3Btn = document.getElementById('day-3')

    day1Btn?.addEventListener('click', () => {
      changeOpacityDayBts(1)
      showProgram(state.stage, 1)
    })

    day2Btn?.addEventListener('click', () => {
      changeOpacityDayBts(2)
      showProgram(state.stage, 2)
    })

    day3Btn?.addEventListener('click', () => {
      changeOpacityDayBts(3)
      showProgram(state.stage, 3)
    })
  }

  function main() {
    try {
      initProgram()
      addEventListeners()
    } catch (error) {
      console.error('Error initializing program:', error)
    }
  }

  // Usar tanto astro:page-load como DOMContentLoaded para mayor compatibilidad
  document.addEventListener('DOMContentLoaded', main)
  document.addEventListener('astro:page-load', main)
</script>
